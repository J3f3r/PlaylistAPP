// Fun√ß√£o f√°brica para criar objetos m√∫sica
function criarMusicas(nome, artista, tempo) {
  return {
    nome: nome,               // Nome da m√∫sica
    artista: artista,         // Nome do artista
    reproducoes: 0,           // N√∫mero de vezes que a m√∫sica foi tocada
    tempo: tempo              // Dura√ß√£o da m√∫sica
  };
}

// Vari√°vel global que controla o √≠ndice da m√∫sica atual
let musicaAtual = 0;

// Objeto playlist contendo todas as funcionalidades
const playlist = {
  musicas: [],  // Array que armazenar√° todas as m√∫sicas da playlist

  // Adiciona uma nova m√∫sica no in√≠cio da playlist
  adicionarMusica: function (nome, artista, tempo) {
    const novaMusica = criarMusicas(nome, artista, tempo);  // Cria nova m√∫sica
    for (let i = this.musicas.length; i > 0; i--) {
      this.musicas[i] = this.musicas[i - 1];  // Desloca todas as m√∫sicas uma posi√ß√£o para frente
    }
    this.musicas[0] = novaMusica;  // Insere a nova m√∫sica na primeira posi√ß√£o
    console.log(`üé∂ M√∫sica "${nome}" foi adicionada √† playlist.`);
  },

  // Remove uma m√∫sica pelo nome
  removerMusica: function (nome) {
    let index = -1;  // Armazena o √≠ndice da m√∫sica a ser removida
    for (let i = 0; i < this.musicas.length; i++) {
      if (this.musicas[i].nome === nome) {
        index = i;  // Encontra o √≠ndice da m√∫sica
        break;
      }
    }
    if (index === -1) {
      console.log(`‚ö†Ô∏è M√∫sica "${nome}" n√£o encontrada.`);
      return;
    }
    // Move as m√∫sicas seguintes uma posi√ß√£o para tr√°s
    for (let i = index; i < this.musicas.length - 1; i++) {
      this.musicas[i] = this.musicas[i + 1];
    }
    this.musicas.length--;  // Diminui o tamanho do array
    console.log(`üóëÔ∏è M√∫sica "${nome}" removida da playlist.`);
  },

  // Move uma m√∫sica para uma nova posi√ß√£o
  moverMusica: function (nome, novaPosicao) {
    let index = -1;
    for (let i = 0; i < this.musicas.length; i++) {
      if (this.musicas[i].nome === nome) {
        index = i;
        break;
      }
    }
    if (index === -1) {
      console.log(`‚ö†Ô∏è M√∫sica "${nome}" n√£o encontrada.`);
      return;
    }
    let musica = this.musicas[index];  // Guarda a m√∫sica selecionada

    // Remove a m√∫sica da posi√ß√£o original
    for (let i = index; i < this.musicas.length - 1; i++) {
      this.musicas[i] = this.musicas[i + 1];
    }
    this.musicas.length--;

    // Insere na nova posi√ß√£o
    for (let i = this.musicas.length; i > novaPosicao; i--) {
      this.musicas[i] = this.musicas[i - 1];
    }
    this.musicas[novaPosicao] = musica;
    console.log(`üìç M√∫sica "${nome}" movida para a posi√ß√£o ${novaPosicao}.`);
  },

  // Toca todas as m√∫sicas da playlist (em sequ√™ncia)
  tocarPlaylist: function () {
    if (this.musicas.length === 0) {
      console.log("üì≠ Playlist est√° vazia.");
      return;
    }
    console.log("‚ñ∂Ô∏è Tocando a playlist completa:");
    for (let i = 0; i < this.musicas.length; i++) {
      this.musicas[i].reproducoes++;  // Incrementa contador de reprodu√ß√µes
      console.log(`üéµ Tocando "${this.musicas[i].nome}" - ${this.musicas[i].artista} (${this.musicas[i].tempo})`);
    }
  },

  // Toca uma m√∫sica espec√≠fica pelo nome
  tocarMusica: function (nome) {
    for (let i = 0; i < this.musicas.length; i++) {
      if (this.musicas[i].nome === nome) {
        this.musicas[i].reproducoes++;
        console.log(`üé∂ Tocando "${this.musicas[i].nome}" - ${this.musicas[i].artista} (${this.musicas[i].tempo})`);
        return;
      }
    }
    console.log(`‚ùå M√∫sica "${nome}" n√£o encontrada.`);
  },

  // Exibe a playlist atual
  mostrarPlaylist: function () {
    if (this.musicas.length === 0) {
      console.log("üì≠ Playlist est√° vazia.");
    } else {
      console.log("üìã Playlist atual:");
      for (let i = 0; i < this.musicas.length; i++) {
        console.log(`${i + 1} - "${this.musicas[i].nome}" - ${this.musicas[i].artista} | Reprodu√ß√µes: ${this.musicas[i].reproducoes}`);
      }
    }
  },

  // Ordena as m√∫sicas pelo nome (Bubble Sort)
  ordenarPorNome: function () {
    let n = this.musicas.length;
    let trocado;
    do {
      trocado = false;
      for (let i = 0; i < n - 1; i++) {
        if (this.musicas[i].nome > this.musicas[i + 1].nome) {
          let temp = this.musicas[i];
          this.musicas[i] = this.musicas[i + 1];
          this.musicas[i + 1] = temp;
          trocado = true;
        }
      }
    } while (trocado);
    console.log("üî§ Playlist ordenada por nome.");
  },

  // Ordena as m√∫sicas por n√∫mero de reprodu√ß√µes (Selection Sort)
  ordenarPorReproducoes: function () {
    let n = this.musicas.length;
    for (let i = 0; i < n - 1; i++) {
      let maxIndex = i;
      for (let j = i + 1; j < n; j++) {
        if (this.musicas[j].reproducoes > this.musicas[maxIndex].reproducoes) {
          maxIndex = j;
        }
      }
      let temp = this.musicas[i];
      this.musicas[i] = this.musicas[maxIndex];
      this.musicas[maxIndex] = temp;
    }
    console.log("üìà Playlist ordenada por reprodu√ß√µes.");
  },

  // Pausa a m√∫sica atual
  pausarMusica: function () {
    let n = this.musicas.length;
    if (n === 0) {
      console.log("üö´ N√£o h√° m√∫sicas para pausar.");
      return;
    }
    const musica = this.musicas[musicaAtual];
    console.log(`‚è∏Ô∏è M√∫sica "${musica.nome}" de ${musica.artista} pausada.`);
  },

  // Pula para a pr√≥xima m√∫sica
  pularMusica: function () {
    let n = this.musicas.length;
    if (n === 0) {
      console.log("üö´ Playlist vazia. N√£o h√° m√∫sicas para pular.");
      return;
    }
    musicaAtual++;  // Avan√ßa para a pr√≥xima m√∫sica
    if (musicaAtual >= n) {
      console.log("üîÅ Fim da playlist. Voltando ao in√≠cio.");
      musicaAtual = 0;  // Volta ao come√ßo da lista
    }
    const musica = this.musicas[musicaAtual];
    console.log(`‚è≠Ô∏è Pulando para: "${musica.nome}" - ${musica.artista} (${musica.tempo})`);
  },

  // Embaralha a ordem das m√∫sicas na playlist
  embaralhar: function () {
    let n = this.musicas.length;  // Corrigido: nome certo da propriedade
    // Percorre a lista de tr√°s para frente
    for (let i = n - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));  // Gera √≠ndice aleat√≥rio entre 0 e i
      // Troca as posi√ß√µes
      let temp = this.musicas[i];
      this.musicas[i] = this.musicas[j];
      this.musicas[j] = temp;
    }
    console.log("üîÄ Playlist embaralhada.");
    musicaAtual = 0;  // Reinicia a reprodu√ß√£o para a primeira posi√ß√£o
  }

};

// Exemplo de uso - Teste das fun√ß√µes
playlist.adicionarMusica("Free", "Natalia", "5:55");
playlist.adicionarMusica("Touch me", "Angelina", "4:55");
playlist.adicionarMusica("Because", "Double You", "3:55");
playlist.adicionarMusica("For You", "Ultranate", "4:35");
playlist.adicionarMusica("Breach", "Nirvana", "3:25");
playlist.adicionarMusica("Zoio de lula", "Charlie Brown Jr", "3:10");

playlist.mostrarPlaylist();
playlist.tocarMusica("Because");
playlist.tocarMusica("Zoio de lula");
playlist.tocarMusica("Zoio de lula");
playlist.tocarMusica("Zoio de lula");
playlist.tocarPlaylist();
playlist.moverMusica("Breach", 2);
playlist.tocarMusica("Breach");
playlist.mostrarPlaylist();
playlist.removerMusica("Because");
playlist.mostrarPlaylist();
playlist.ordenarPorNome();
playlist.mostrarPlaylist();
playlist.ordenarPorReproducoes();
playlist.mostrarPlaylist();
playlist.tocarMusica("For You");
playlist.pausarMusica();
playlist.pularMusica();
playlist.embaralhar();
playlist.mostrarPlaylist();
